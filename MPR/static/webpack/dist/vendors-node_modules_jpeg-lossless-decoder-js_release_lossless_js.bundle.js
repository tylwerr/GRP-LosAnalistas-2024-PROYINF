"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmpr"] = self["webpackChunkmpr"] || []).push([["vendors-node_modules_jpeg-lossless-decoder-js_release_lossless_js"],{

/***/ "./node_modules/jpeg-lossless-decoder-js/release/lossless.js":
/*!*******************************************************************!*\
  !*** ./node_modules/jpeg-lossless-decoder-js/release/lossless.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentSpec: () => (/* binding */ ComponentSpec),\n/* harmony export */   DataStream: () => (/* binding */ DataStream),\n/* harmony export */   Decoder: () => (/* binding */ Decoder),\n/* harmony export */   FrameHeader: () => (/* binding */ FrameHeader),\n/* harmony export */   HuffmanTable: () => (/* binding */ HuffmanTable),\n/* harmony export */   QuantizationTable: () => (/* binding */ QuantizationTable),\n/* harmony export */   ScanComponent: () => (/* binding */ ScanComponent),\n/* harmony export */   ScanHeader: () => (/* binding */ ScanHeader),\n/* harmony export */   Utils: () => (/* binding */ utils_exports)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/component-spec.ts\nvar ComponentSpec = {\n  hSamp: 0,\n  quantTableSel: 0,\n  vSamp: 0\n};\n\n// src/data-stream.ts\nvar DataStream = class {\n  buffer;\n  index;\n  constructor(data, offset, length) {\n    this.buffer = new Uint8Array(data, offset, length);\n    this.index = 0;\n  }\n  get16() {\n    const value = (this.buffer[this.index] << 8) + this.buffer[this.index + 1];\n    this.index += 2;\n    return value;\n  }\n  get8() {\n    const value = this.buffer[this.index];\n    this.index += 1;\n    return value;\n  }\n};\n\n// src/frame-header.ts\nvar FrameHeader = class {\n  dimX = 0;\n  dimY = 0;\n  numComp = 0;\n  precision = 0;\n  components = [];\n  read(data) {\n    let count = 0;\n    let temp;\n    const length = data.get16();\n    count += 2;\n    this.precision = data.get8();\n    count += 1;\n    this.dimY = data.get16();\n    count += 2;\n    this.dimX = data.get16();\n    count += 2;\n    this.numComp = data.get8();\n    count += 1;\n    for (let i = 1; i <= this.numComp; i += 1) {\n      if (count > length) {\n        throw new Error(\"ERROR: frame format error\");\n      }\n      const c = data.get8();\n      count += 1;\n      if (count >= length) {\n        throw new Error(\"ERROR: frame format error [c>=Lf]\");\n      }\n      temp = data.get8();\n      count += 1;\n      if (!this.components[c]) {\n        this.components[c] = { ...ComponentSpec };\n      }\n      this.components[c].hSamp = temp >> 4;\n      this.components[c].vSamp = temp & 15;\n      this.components[c].quantTableSel = data.get8();\n      count += 1;\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: frame format error [Lf!=count]\");\n    }\n    return 1;\n  }\n};\n\n// src/utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  crc32: () => crc32,\n  crcTable: () => crcTable,\n  createArray: () => createArray,\n  makeCRCTable: () => makeCRCTable\n});\nvar createArray = (...dimensions) => {\n  if (dimensions.length > 1) {\n    const dim = dimensions[0];\n    const rest = dimensions.slice(1);\n    const newArray = [];\n    for (let i = 0; i < dim; i++) {\n      newArray[i] = createArray(...rest);\n    }\n    return newArray;\n  } else {\n    return Array(dimensions[0]).fill(void 0);\n  }\n};\nvar makeCRCTable = function() {\n  let c;\n  const crcTable2 = [];\n  for (let n = 0; n < 256; n++) {\n    c = n;\n    for (let k = 0; k < 8; k++) {\n      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;\n    }\n    crcTable2[n] = c;\n  }\n  return crcTable2;\n};\nvar crcTable = makeCRCTable();\nvar crc32 = function(buffer) {\n  const uint8view = new Uint8Array(buffer);\n  let crc = 0 ^ -1;\n  for (let i = 0; i < uint8view.length; i++) {\n    crc = crc >>> 8 ^ crcTable[(crc ^ uint8view[i]) & 255];\n  }\n  return (crc ^ -1) >>> 0;\n};\n\n// src/huffman-table.ts\nvar HuffmanTable = class _HuffmanTable {\n  static MSB = 2147483648;\n  l;\n  th;\n  v;\n  tc;\n  constructor() {\n    this.l = createArray(4, 2, 16);\n    this.th = [0, 0, 0, 0];\n    this.v = createArray(4, 2, 16, 200);\n    this.tc = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0]\n    ];\n  }\n  read(data, HuffTab) {\n    let count = 0;\n    let temp;\n    let t;\n    let c;\n    let i;\n    let j;\n    const length = data.get16();\n    count += 2;\n    while (count < length) {\n      temp = data.get8();\n      count += 1;\n      t = temp & 15;\n      if (t > 3) {\n        throw new Error(\"ERROR: Huffman table ID > 3\");\n      }\n      c = temp >> 4;\n      if (c > 2) {\n        throw new Error(\"ERROR: Huffman table [Table class > 2 ]\");\n      }\n      this.th[t] = 1;\n      this.tc[t][c] = 1;\n      for (i = 0; i < 16; i += 1) {\n        this.l[t][c][i] = data.get8();\n        count += 1;\n      }\n      for (i = 0; i < 16; i += 1) {\n        for (j = 0; j < this.l[t][c][i]; j += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Huffman table format error [count>Lh]\");\n          }\n          this.v[t][c][i][j] = data.get8();\n          count += 1;\n        }\n      }\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: Huffman table format error [count!=Lf]\");\n    }\n    for (i = 0; i < 4; i += 1) {\n      for (j = 0; j < 2; j += 1) {\n        if (this.tc[i][j] !== 0) {\n          this.buildHuffTable(HuffTab[i][j], this.l[i][j], this.v[i][j]);\n        }\n      }\n    }\n    return 1;\n  }\n  //\tBuild_HuffTab()\n  //\tParameter:  t       table ID\n  //\t            c       table class ( 0 for DC, 1 for AC )\n  //\t            L[i]    # of codewords which length is i\n  //\t            V[i][j] Huffman Value (length=i)\n  //\tEffect:\n  //\t    build up HuffTab[t][c] using L and V.\n  buildHuffTable(tab, L, V) {\n    let currentTable, k, i, j, n;\n    const temp = 256;\n    k = 0;\n    for (i = 0; i < 8; i += 1) {\n      for (j = 0; j < L[i]; j += 1) {\n        for (n = 0; n < temp >> i + 1; n += 1) {\n          tab[k] = V[i][j] | i + 1 << 8;\n          k += 1;\n        }\n      }\n    }\n    for (i = 1; k < 256; i += 1, k += 1) {\n      tab[k] = i | _HuffmanTable.MSB;\n    }\n    currentTable = 1;\n    k = 0;\n    for (i = 8; i < 16; i += 1) {\n      for (j = 0; j < L[i]; j += 1) {\n        for (n = 0; n < temp >> i - 7; n += 1) {\n          tab[currentTable * 256 + k] = V[i][j] | i + 1 << 8;\n          k += 1;\n        }\n        if (k >= 256) {\n          if (k > 256) {\n            throw new Error(\"ERROR: Huffman table error(1)!\");\n          }\n          k = 0;\n          currentTable += 1;\n        }\n      }\n    }\n  }\n};\n\n// src/quantization-table.ts\nvar QuantizationTable = class _QuantizationTable {\n  precision = [];\n  // Quantization precision 8 or 16\n  tq = [0, 0, 0, 0];\n  // 1: this table is presented\n  quantTables = createArray(4, 64);\n  // Tables\n  static enhanceQuantizationTable = function(qtab, table) {\n    for (let i = 0; i < 8; i += 1) {\n      qtab[table[0 * 8 + i]] *= 90;\n      qtab[table[4 * 8 + i]] *= 90;\n      qtab[table[2 * 8 + i]] *= 118;\n      qtab[table[6 * 8 + i]] *= 49;\n      qtab[table[5 * 8 + i]] *= 71;\n      qtab[table[1 * 8 + i]] *= 126;\n      qtab[table[7 * 8 + i]] *= 25;\n      qtab[table[3 * 8 + i]] *= 106;\n    }\n    for (let i = 0; i < 8; i += 1) {\n      qtab[table[0 + 8 * i]] *= 90;\n      qtab[table[4 + 8 * i]] *= 90;\n      qtab[table[2 + 8 * i]] *= 118;\n      qtab[table[6 + 8 * i]] *= 49;\n      qtab[table[5 + 8 * i]] *= 71;\n      qtab[table[1 + 8 * i]] *= 126;\n      qtab[table[7 + 8 * i]] *= 25;\n      qtab[table[3 + 8 * i]] *= 106;\n    }\n    for (let i = 0; i < 64; i += 1) {\n      qtab[i] >>= 6;\n    }\n  };\n  read(data, table) {\n    let count = 0;\n    let temp;\n    let t;\n    let i;\n    const length = data.get16();\n    count += 2;\n    while (count < length) {\n      temp = data.get8();\n      count += 1;\n      t = temp & 15;\n      if (t > 3) {\n        throw new Error(\"ERROR: Quantization table ID > 3\");\n      }\n      this.precision[t] = temp >> 4;\n      if (this.precision[t] === 0) {\n        this.precision[t] = 8;\n      } else if (this.precision[t] === 1) {\n        this.precision[t] = 16;\n      } else {\n        throw new Error(\"ERROR: Quantization table precision error\");\n      }\n      this.tq[t] = 1;\n      if (this.precision[t] === 8) {\n        for (i = 0; i < 64; i += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Quantization table format error\");\n          }\n          this.quantTables[t][i] = data.get8();\n          count += 1;\n        }\n        _QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n      } else {\n        for (i = 0; i < 64; i += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Quantization table format error\");\n          }\n          this.quantTables[t][i] = data.get16();\n          count += 2;\n        }\n        _QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n      }\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: Quantization table error [count!=Lq]\");\n    }\n    return 1;\n  }\n};\n\n// src/scan-component.ts\nvar ScanComponent = {\n  acTabSel: 0,\n  // AC table selector\n  dcTabSel: 0,\n  // DC table selector\n  scanCompSel: 0\n  // Scan component selector\n};\n\n// src/scan-header.ts\nvar ScanHeader = class {\n  ah = 0;\n  al = 0;\n  numComp = 0;\n  // Number of components in the scan\n  selection = 0;\n  // Start of spectral or predictor selection\n  spectralEnd = 0;\n  // End of spectral selection\n  components = [];\n  read(data) {\n    let count = 0;\n    let i;\n    let temp;\n    const length = data.get16();\n    count += 2;\n    this.numComp = data.get8();\n    count += 1;\n    for (i = 0; i < this.numComp; i += 1) {\n      this.components[i] = { ...ScanComponent };\n      if (count > length) {\n        throw new Error(\"ERROR: scan header format error\");\n      }\n      this.components[i].scanCompSel = data.get8();\n      count += 1;\n      temp = data.get8();\n      count += 1;\n      this.components[i].dcTabSel = temp >> 4;\n      this.components[i].acTabSel = temp & 15;\n    }\n    this.selection = data.get8();\n    count += 1;\n    this.spectralEnd = data.get8();\n    count += 1;\n    temp = data.get8();\n    this.ah = temp >> 4;\n    this.al = temp & 15;\n    count += 1;\n    if (count !== length) {\n      throw new Error(\"ERROR: scan header format error [count!=Ns]\");\n    }\n    return 1;\n  }\n};\n\n// src/decoder.ts\nvar littleEndian = function() {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(\n    0,\n    256,\n    true\n    /* littleEndian */\n  );\n  return new Int16Array(buffer)[0] === 256;\n}();\nvar Decoder = class _Decoder {\n  static IDCT_P = [\n    0,\n    5,\n    40,\n    16,\n    45,\n    2,\n    7,\n    42,\n    21,\n    56,\n    8,\n    61,\n    18,\n    47,\n    1,\n    4,\n    41,\n    23,\n    58,\n    13,\n    32,\n    24,\n    37,\n    10,\n    63,\n    17,\n    44,\n    3,\n    6,\n    43,\n    20,\n    57,\n    15,\n    34,\n    29,\n    48,\n    53,\n    26,\n    39,\n    9,\n    60,\n    19,\n    46,\n    22,\n    59,\n    12,\n    33,\n    31,\n    50,\n    55,\n    25,\n    36,\n    11,\n    62,\n    14,\n    35,\n    28,\n    49,\n    52,\n    27,\n    38,\n    30,\n    51,\n    54\n  ];\n  static TABLE = [\n    0,\n    1,\n    5,\n    6,\n    14,\n    15,\n    27,\n    28,\n    2,\n    4,\n    7,\n    13,\n    16,\n    26,\n    29,\n    42,\n    3,\n    8,\n    12,\n    17,\n    25,\n    30,\n    41,\n    43,\n    9,\n    11,\n    18,\n    24,\n    31,\n    40,\n    44,\n    53,\n    10,\n    19,\n    23,\n    32,\n    39,\n    45,\n    52,\n    54,\n    20,\n    22,\n    33,\n    38,\n    46,\n    51,\n    55,\n    60,\n    21,\n    34,\n    37,\n    47,\n    50,\n    56,\n    59,\n    61,\n    35,\n    36,\n    48,\n    49,\n    57,\n    58,\n    62,\n    63\n  ];\n  static MAX_HUFFMAN_SUBTREE = 50;\n  static MSB = 2147483648;\n  static RESTART_MARKER_BEGIN = 65488;\n  static RESTART_MARKER_END = 65495;\n  buffer = null;\n  stream = null;\n  frame = new FrameHeader();\n  huffTable = new HuffmanTable();\n  quantTable = new QuantizationTable();\n  scan = new ScanHeader();\n  DU = createArray(10, 4, 64);\n  // at most 10 data units in a MCU, at most 4 data units in one component\n  HuffTab = createArray(4, 2, 50 * 256);\n  IDCT_Source = [];\n  nBlock = [];\n  // number of blocks in the i-th Comp in a scan\n  acTab = createArray(10, 1);\n  // ac HuffTab for the i-th Comp in a scan\n  dcTab = createArray(10, 1);\n  // dc HuffTab for the i-th Comp in a scan\n  qTab = createArray(10, 1);\n  // quantization table for the i-th Comp in a scan\n  marker = 0;\n  markerIndex = 0;\n  numComp = 0;\n  restartInterval = 0;\n  selection = 0;\n  xDim = 0;\n  yDim = 0;\n  xLoc = 0;\n  yLoc = 0;\n  outputData = null;\n  restarting = false;\n  mask = 0;\n  numBytes = 0;\n  precision = void 0;\n  components = [];\n  getter = null;\n  setter = null;\n  output = null;\n  selector = null;\n  /**\n   * The Decoder constructor.\n   * @property {number} numBytes - number of bytes per component\n   * @type {Function}\n   */\n  constructor(buffer, numBytes) {\n    this.buffer = buffer ?? null;\n    this.numBytes = numBytes ?? 0;\n  }\n  /**\n   * Returns decompressed data.\n   */\n  decompress(buffer, offset, length) {\n    const result = this.decode(buffer, offset, length);\n    return result.buffer;\n  }\n  decode(buffer, offset, length, numBytes) {\n    let scanNum = 0;\n    const pred = [];\n    let i;\n    let compN;\n    const temp = [];\n    const index = [];\n    let mcuNum;\n    if (buffer) {\n      this.buffer = buffer;\n    }\n    if (numBytes !== void 0) {\n      this.numBytes = numBytes;\n    }\n    this.stream = new DataStream(this.buffer, offset, length);\n    this.buffer = null;\n    this.xLoc = 0;\n    this.yLoc = 0;\n    let current = this.stream.get16();\n    if (current !== 65496) {\n      throw new Error(\"Not a JPEG file\");\n    }\n    current = this.stream.get16();\n    while (current >> 4 !== 4092 || current === 65476) {\n      switch (current) {\n        case 65476:\n          this.huffTable.read(this.stream, this.HuffTab);\n          break;\n        case 65484:\n          throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n        case 65499:\n          this.quantTable.read(this.stream, _Decoder.TABLE);\n          break;\n        case 65501:\n          this.restartInterval = this.readNumber() ?? 0;\n          break;\n        case 65504:\n        case 65505:\n        case 65506:\n        case 65507:\n        case 65508:\n        case 65509:\n        case 65510:\n        case 65511:\n        case 65512:\n        case 65513:\n        case 65514:\n        case 65515:\n        case 65516:\n        case 65517:\n        case 65518:\n        case 65519:\n          this.readApp();\n          break;\n        case 65534:\n          this.readComment();\n          break;\n        default:\n          if (current >> 8 !== 255) {\n            throw new Error(\"ERROR: format throw new IOException! (decode)\");\n          }\n      }\n      current = this.stream.get16();\n    }\n    if (current < 65472 || current > 65479) {\n      throw new Error(\"ERROR: could not handle arithmetic code!\");\n    }\n    this.frame.read(this.stream);\n    current = this.stream.get16();\n    do {\n      while (current !== 65498) {\n        switch (current) {\n          case 65476:\n            this.huffTable.read(this.stream, this.HuffTab);\n            break;\n          case 65484:\n            throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n          case 65499:\n            this.quantTable.read(this.stream, _Decoder.TABLE);\n            break;\n          case 65501:\n            this.restartInterval = this.readNumber() ?? 0;\n            break;\n          case 65504:\n          case 65505:\n          case 65506:\n          case 65507:\n          case 65508:\n          case 65509:\n          case 65510:\n          case 65511:\n          case 65512:\n          case 65513:\n          case 65514:\n          case 65515:\n          case 65516:\n          case 65517:\n          case 65518:\n          case 65519:\n            this.readApp();\n            break;\n          case 65534:\n            this.readComment();\n            break;\n          default:\n            if (current >> 8 !== 255) {\n              throw new Error(\"ERROR: format throw new IOException! (Parser.decode)\");\n            }\n        }\n        current = this.stream.get16();\n      }\n      this.precision = this.frame.precision;\n      this.components = this.frame.components;\n      if (!this.numBytes) {\n        this.numBytes = Math.round(Math.ceil(this.precision / 8));\n      }\n      if (this.numBytes === 1) {\n        this.mask = 255;\n      } else {\n        this.mask = 65535;\n      }\n      this.scan.read(this.stream);\n      this.numComp = this.scan.numComp;\n      this.selection = this.scan.selection;\n      if (this.numBytes === 1) {\n        if (this.numComp === 3) {\n          this.getter = this.getValueRGB;\n          this.setter = this.setValueRGB;\n          this.output = this.outputRGB;\n        } else {\n          this.getter = this.getValue8;\n          this.setter = this.setValue8;\n          this.output = this.outputSingle;\n        }\n      } else {\n        this.getter = this.getValue8;\n        this.setter = this.setValue8;\n        this.output = this.outputSingle;\n      }\n      switch (this.selection) {\n        case 2:\n          this.selector = this.select2;\n          break;\n        case 3:\n          this.selector = this.select3;\n          break;\n        case 4:\n          this.selector = this.select4;\n          break;\n        case 5:\n          this.selector = this.select5;\n          break;\n        case 6:\n          this.selector = this.select6;\n          break;\n        case 7:\n          this.selector = this.select7;\n          break;\n        default:\n          this.selector = this.select1;\n          break;\n      }\n      for (i = 0; i < this.numComp; i += 1) {\n        compN = this.scan.components[i].scanCompSel;\n        this.qTab[i] = this.quantTable.quantTables[this.components[compN].quantTableSel];\n        this.nBlock[i] = this.components[compN].vSamp * this.components[compN].hSamp;\n        this.dcTab[i] = this.HuffTab[this.scan.components[i].dcTabSel][0];\n        this.acTab[i] = this.HuffTab[this.scan.components[i].acTabSel][1];\n      }\n      this.xDim = this.frame.dimX;\n      this.yDim = this.frame.dimY;\n      if (this.numBytes === 1) {\n        this.outputData = new Uint8Array(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));\n      } else {\n        this.outputData = new Uint16Array(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));\n      }\n      scanNum += 1;\n      while (true) {\n        temp[0] = 0;\n        index[0] = 0;\n        for (i = 0; i < 10; i += 1) {\n          pred[i] = 1 << this.precision - 1;\n        }\n        if (this.restartInterval === 0) {\n          current = this.decodeUnit(pred, temp, index);\n          while (current === 0 && this.xLoc < this.xDim && this.yLoc < this.yDim) {\n            this.output(pred);\n            current = this.decodeUnit(pred, temp, index);\n          }\n          break;\n        }\n        for (mcuNum = 0; mcuNum < this.restartInterval; mcuNum += 1) {\n          this.restarting = mcuNum === 0;\n          current = this.decodeUnit(pred, temp, index);\n          this.output(pred);\n          if (current !== 0) {\n            break;\n          }\n        }\n        if (current === 0) {\n          if (this.markerIndex !== 0) {\n            current = 65280 | this.marker;\n            this.markerIndex = 0;\n          } else {\n            current = this.stream.get16();\n          }\n        }\n        if (!(current >= _Decoder.RESTART_MARKER_BEGIN && current <= _Decoder.RESTART_MARKER_END)) {\n          break;\n        }\n      }\n      if (current === 65500 && scanNum === 1) {\n        this.readNumber();\n        current = this.stream.get16();\n      }\n    } while (current !== 65497 && this.xLoc < this.xDim && this.yLoc < this.yDim && scanNum === 0);\n    return this.outputData;\n  }\n  decodeUnit(prev, temp, index) {\n    if (this.numComp === 1) {\n      return this.decodeSingle(prev, temp, index);\n    } else if (this.numComp === 3) {\n      return this.decodeRGB(prev, temp, index);\n    } else {\n      return -1;\n    }\n  }\n  select1(compOffset) {\n    return this.getPreviousX(compOffset);\n  }\n  select2(compOffset) {\n    return this.getPreviousY(compOffset);\n  }\n  select3(compOffset) {\n    return this.getPreviousXY(compOffset);\n  }\n  select4(compOffset) {\n    return this.getPreviousX(compOffset) + this.getPreviousY(compOffset) - this.getPreviousXY(compOffset);\n  }\n  select5(compOffset) {\n    return this.getPreviousX(compOffset) + (this.getPreviousY(compOffset) - this.getPreviousXY(compOffset) >> 1);\n  }\n  select6(compOffset) {\n    return this.getPreviousY(compOffset) + (this.getPreviousX(compOffset) - this.getPreviousXY(compOffset) >> 1);\n  }\n  select7(compOffset) {\n    return (this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) / 2;\n  }\n  decodeRGB(prev, temp, index) {\n    if (this.selector === null)\n      throw new Error(\"decode hasn't run yet\");\n    let actab, dctab, qtab, ctrC, i, k, j;\n    prev[0] = this.selector(0);\n    prev[1] = this.selector(1);\n    prev[2] = this.selector(2);\n    for (ctrC = 0; ctrC < this.numComp; ctrC += 1) {\n      qtab = this.qTab[ctrC];\n      actab = this.acTab[ctrC];\n      dctab = this.dcTab[ctrC];\n      for (i = 0; i < this.nBlock[ctrC]; i += 1) {\n        for (k = 0; k < this.IDCT_Source.length; k += 1) {\n          this.IDCT_Source[k] = 0;\n        }\n        let value = this.getHuffmanValue(dctab, temp, index);\n        if (value >= 65280) {\n          return value;\n        }\n        prev[ctrC] = this.IDCT_Source[0] = prev[ctrC] + this.getn(index, value, temp, index);\n        this.IDCT_Source[0] *= qtab[0];\n        for (j = 1; j < 64; j += 1) {\n          value = this.getHuffmanValue(actab, temp, index);\n          if (value >= 65280) {\n            return value;\n          }\n          j += value >> 4;\n          if ((value & 15) === 0) {\n            if (value >> 4 === 0) {\n              break;\n            }\n          } else {\n            this.IDCT_Source[_Decoder.IDCT_P[j]] = this.getn(index, value & 15, temp, index) * qtab[j];\n          }\n        }\n      }\n    }\n    return 0;\n  }\n  decodeSingle(prev, temp, index) {\n    if (this.selector === null)\n      throw new Error(\"decode hasn't run yet\");\n    let value, i, n, nRestart;\n    if (this.restarting) {\n      this.restarting = false;\n      prev[0] = 1 << this.frame.precision - 1;\n    } else {\n      prev[0] = this.selector();\n    }\n    for (i = 0; i < this.nBlock[0]; i += 1) {\n      value = this.getHuffmanValue(this.dcTab[0], temp, index);\n      if (value >= 65280) {\n        return value;\n      }\n      n = this.getn(prev, value, temp, index);\n      nRestart = n >> 8;\n      if (nRestart >= _Decoder.RESTART_MARKER_BEGIN && nRestart <= _Decoder.RESTART_MARKER_END) {\n        return nRestart;\n      }\n      prev[0] += n;\n    }\n    return 0;\n  }\n  //\tHuffman table for fast search: (HuffTab) 8-bit Look up table 2-layer search architecture, 1st-layer represent 256 node (8 bits) if codeword-length > 8\n  //\tbits, then the entry of 1st-layer = (# of 2nd-layer table) | MSB and it is stored in the 2nd-layer Size of tables in each layer are 256.\n  //\tHuffTab[*][*][0-256] is always the only 1st-layer table.\n  //\n  //\tAn entry can be: (1) (# of 2nd-layer table) | MSB , for code length > 8 in 1st-layer (2) (Code length) << 8 | HuffVal\n  //\n  //\tHuffmanValue(table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n  //\t                ):\n  //\t    return: Huffman Value of table\n  //\t            0xFF?? if it receives a MARKER\n  //\t    Parameter:  table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n  //\t                temp    temp storage for remainded bits\n  //\t                index   index to bit of temp\n  //\t                in      FILE pointer\n  //\t    Effect:\n  //\t        temp  store new remainded bits\n  //\t        index change to new index\n  //\t        in    change to new position\n  //\t    NOTE:\n  //\t      Initial by   temp=0; index=0;\n  //\t    NOTE: (explain temp and index)\n  //\t      temp: is always in the form at calling time or returning time\n  //\t       |  byte 4  |  byte 3  |  byte 2  |  byte 1  |\n  //\t       |     0    |     0    | 00000000 | 00000??? |  if not a MARKER\n  //\t                                               ^index=3 (from 0 to 15)\n  //\t                                               321\n  //\t    NOTE (marker and marker_index):\n  //\t      If get a MARKER from 'in', marker=the low-byte of the MARKER\n  //\t        and marker_index=9\n  //\t      If marker_index=9 then index is always > 8, or HuffmanValue()\n  //\t        will not be called\n  getHuffmanValue(table, temp, index) {\n    let code, input;\n    const mask = 65535;\n    if (!this.stream)\n      throw new Error(\"stream not initialized\");\n    if (index[0] < 8) {\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n    } else {\n      index[0] -= 8;\n    }\n    code = table[temp[0] >> index[0]];\n    if ((code & _Decoder.MSB) !== 0) {\n      if (this.markerIndex !== 0) {\n        this.markerIndex = 0;\n        return 65280 | this.marker;\n      }\n      temp[0] &= mask >> 16 - index[0];\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n      code = table[(code & 255) * 256 + (temp[0] >> index[0])];\n      index[0] += 8;\n    }\n    index[0] += 8 - (code >> 8);\n    if (index[0] < 0) {\n      throw new Error(\"index=\" + index[0] + \" temp=\" + temp[0] + \" code=\" + code + \" in HuffmanValue()\");\n    }\n    if (index[0] < this.markerIndex) {\n      this.markerIndex = 0;\n      return 65280 | this.marker;\n    }\n    temp[0] &= mask >> 16 - index[0];\n    return code & 255;\n  }\n  getn(PRED, n, temp, index) {\n    let result, input;\n    const one = 1;\n    const n_one = -1;\n    const mask = 65535;\n    if (this.stream === null)\n      throw new Error(\"stream not initialized\");\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 16) {\n      if (PRED[0] >= 0) {\n        return -32768;\n      } else {\n        return 32768;\n      }\n    }\n    index[0] -= n;\n    if (index[0] >= 0) {\n      if (index[0] < this.markerIndex && !this.isLastPixel()) {\n        this.markerIndex = 0;\n        return (65280 | this.marker) << 8;\n      }\n      result = temp[0] >> index[0];\n      temp[0] &= mask >> 16 - index[0];\n    } else {\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n      index[0] += 8;\n      if (index[0] < 0) {\n        if (this.markerIndex !== 0) {\n          this.markerIndex = 0;\n          return (65280 | this.marker) << 8;\n        }\n        temp[0] <<= 8;\n        input = this.stream.get8();\n        if (input === 255) {\n          this.marker = this.stream.get8();\n          if (this.marker !== 0) {\n            this.markerIndex = 9;\n          }\n        }\n        temp[0] |= input;\n        index[0] += 8;\n      }\n      if (index[0] < 0) {\n        throw new Error(\"index=\" + index[0] + \" in getn()\");\n      }\n      if (index[0] < this.markerIndex) {\n        this.markerIndex = 0;\n        return (65280 | this.marker) << 8;\n      }\n      result = temp[0] >> index[0];\n      temp[0] &= mask >> 16 - index[0];\n    }\n    if (result < one << n - 1) {\n      result += (n_one << n) + 1;\n    }\n    return result;\n  }\n  getPreviousX(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc > 0) {\n      return this.getter(this.yLoc * this.xDim + this.xLoc - 1, compOffset);\n    } else if (this.yLoc > 0) {\n      return this.getPreviousY(compOffset);\n    } else {\n      return 1 << this.frame.precision - 1;\n    }\n  }\n  getPreviousXY(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc > 0 && this.yLoc > 0) {\n      return this.getter((this.yLoc - 1) * this.xDim + this.xLoc - 1, compOffset);\n    } else {\n      return this.getPreviousY(compOffset);\n    }\n  }\n  getPreviousY(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.yLoc > 0) {\n      return this.getter((this.yLoc - 1) * this.xDim + this.xLoc, compOffset);\n    } else {\n      return this.getPreviousX(compOffset);\n    }\n  }\n  isLastPixel() {\n    return this.xLoc === this.xDim - 1 && this.yLoc === this.yDim - 1;\n  }\n  outputSingle(PRED) {\n    if (this.setter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc < this.xDim && this.yLoc < this.yDim) {\n      this.setter(this.yLoc * this.xDim + this.xLoc, this.mask & PRED[0]);\n      this.xLoc += 1;\n      if (this.xLoc >= this.xDim) {\n        this.yLoc += 1;\n        this.xLoc = 0;\n      }\n    }\n  }\n  outputRGB(PRED) {\n    if (this.setter === null)\n      throw new Error(\"decode hasn't run yet\");\n    const offset = this.yLoc * this.xDim + this.xLoc;\n    if (this.xLoc < this.xDim && this.yLoc < this.yDim) {\n      this.setter(offset, PRED[0], 0);\n      this.setter(offset, PRED[1], 1);\n      this.setter(offset, PRED[2], 2);\n      this.xLoc += 1;\n      if (this.xLoc >= this.xDim) {\n        this.yLoc += 1;\n        this.xLoc = 0;\n      }\n    }\n  }\n  setValue8(index, val) {\n    if (!this.outputData)\n      throw new Error(\"output data not ready\");\n    if (littleEndian) {\n      this.outputData[index] = val;\n    } else {\n      this.outputData[index] = (val & 255) << 8 | val >> 8 & 255;\n    }\n  }\n  getValue8(index) {\n    if (this.outputData === null)\n      throw new Error(\"output data not ready\");\n    if (littleEndian) {\n      return this.outputData[index];\n    } else {\n      const val = this.outputData[index];\n      return (val & 255) << 8 | val >> 8 & 255;\n    }\n  }\n  setValueRGB(index, val, compOffset = 0) {\n    if (this.outputData === null)\n      return;\n    this.outputData[index * 3 + compOffset] = val;\n  }\n  getValueRGB(index, compOffset) {\n    if (this.outputData === null)\n      throw new Error(\"output data not ready\");\n    return this.outputData[index * 3 + compOffset];\n  }\n  readApp() {\n    if (this.stream === null)\n      return null;\n    let count = 0;\n    const length = this.stream.get16();\n    count += 2;\n    while (count < length) {\n      this.stream.get8();\n      count += 1;\n    }\n    return length;\n  }\n  readComment() {\n    if (this.stream === null)\n      return null;\n    let sb = \"\";\n    let count = 0;\n    const length = this.stream.get16();\n    count += 2;\n    while (count < length) {\n      sb += this.stream.get8();\n      count += 1;\n    }\n    return sb;\n  }\n  readNumber() {\n    if (this.stream === null)\n      return null;\n    const Ld = this.stream.get16();\n    if (Ld !== 4) {\n      throw new Error(\"ERROR: Define number format throw new IOException [Ld!=4]\");\n    }\n    return this.stream.get16();\n  }\n};\n\n//# sourceMappingURL=lossless.js.map\n\n//# sourceURL=webpack://mpr/./node_modules/jpeg-lossless-decoder-js/release/lossless.js?");

/***/ })

}]);